// Начиная с этой темы, и далее, я буду конспектировать гораздо меньше вещей.
// Просто потому что иногда получается, что я выписываю больше вещей которые не запоминаю.
// Я буду стараться больше выписывать важные штуки которые изучил по книге

package main

import (
	"fmt"
)

// Для объявления структуры синтаксис такой: type имя_структуры struct
// Внутри - поля (здесь же это полями зовётся?): имя тип_поля
type person struct {
	name string
	age  int
	pet  string
}

func main() {

	fmt.Println("Structs")
	// Структуры предоставляют удобный способ сохранения некоторых данных
	// (А так как в Го нет классов, то по сути эт единственный способ для абстракции данных)
	// (Собственно через структуры и их функции будет применяться ООП, хоть и наследования здесь нет)

	// Объявление структур
	var fred person
	bob := person{}
	// без присваивания значений у структуры все поля равны нулевому значению согласно их типу
	// пустая переменная или просто пустой литерал,
	// структуры всегда будут по умолчанию с нулевыми значениями

	// разные способы записи литералов структуры
	julia := person{
		"Julia",
		40,
		"cat",
	}

	// этот способ удобен, если в будущем нужно добавить ещё поля
	// ведь использовать первый способ, необходимо указать все поля
	// для этого не обязательно все, только те которые нужны,
	// то есть, если добавить ещё поля, то во всех файлах где есть первый способ реализации, будет ошибка
	beth := person{
		age:  30,
		name: "Beth",
	}

	// Доступ к полям структуры

	bob.name = "Bob"
	fmt.Println(beth.name)

	// Анонимные структуры
	// можно объявить что переменная реализует структурный тип без предварительного присвоения имени этому
	// структурному типу. Такие структуры и зовутся анонимными.

	var person2 struct {
		name string
		age  int
		pet  string
	}
	person2.name = "bob"
	person2.age = 30
	person2.pet = "dog"

	pet := struct {
		name string
		kind string
	}{
		name: "Fido",
		kind: "dog",
	}

	// Это может пригодиться если нужно преобразовать внешние данные в структуру или наоборот
	// пример: JSON или (некие) буферы протоколов.
	// Такой вид преобразований зовётся "маршалингом" или "демаршалингом" данных.
	// Также используется при написании тестов.

	// Сравнение и преобразование структур
	// Структуры могут быть сравниваемыми или несравниваемыми, в зависимости от того какие поля
	// (Если все поля сравниваемые - структура такая же, иначе - несравниваемая)
	// переопределить операции != и == для несравниваемых структур - невозможно.

	// Невозможно сравнивать переменные относящиеся к разным структурным типам.
	// В то же время доступно преобразование из одного структурного типа в другой,
	// если поля обеих структур имеют одинаковые имена, типы и расположены в одинаковом порядке.

	// Сравнивать можно экземпляры структур только одно и того же типа. (То есть если они реализуют одинаковую структуру)
	// ((И ЕСЛИ У НИХ СРАВНИВАЕМЫЕ ПОЛЯ))

	// В случае с анонимными структурами, они не имеют имени, поэтому можно сравнить две переменные, одна
	// из которых реализует конкретную именованную структуру и переменную анонимной структуры без имени,
	// если она обладает теми же полями, с теми же названиями, в том же порядке
}
