package main

import (
	"fmt"
	"math/rand"
)

func main() {
	fmt.Println("if")
	// синтаксис самый узнаваемый, заключать условие в круглые скобки ненада

	n := rand.Intn(10)
	fmt.Println(n)

	if n == 0 {
		fmt.Println("zero")
	} else if n > 5 {
		fmt.Println("big")
	} else {
		fmt.Println("nice number")
	}

	// уникальная особенность в том, что можно объявить переменные сразу в блоке условия

	if m := rand.Intn(10); m == 0 {
		fmt.Println("zero")
	} else if m > 5 {
		fmt.Println("big")
	} else {
		fmt.Println("nice number")
	}
	// данная m определена только для всех блоков if else, случайно обратиться к ней условия
	// невозможно

	// Очевидно такое объявление будет затенять объявленные переменные блоком выше

	fmt.Println("For")
	/*
		for - единственный способ организации циклов.
		(while здесь нет, это просто уникальный for)
		Всего 4 вида for:
		1) полный, стиле языка C
		2) for использующий только условие
		3) бесконечный for
		4) оператор for-range
	*/

	// Полный for
	for i := 0; i < 10; i++ {
		fmt.Println(i)
	}
	// Использование var для объявления переменной не допускается, только :=.
	// Переменные тут также затеняются

	// For с 1 условием
	j := 1
	for j < 100 {
		fmt.Println(j)
		j *= 2
	}
	// самый обычный while

	// Бесконечный for
	// не запускай это
	for {
		fmt.Println("Hello")
		break
	}
	// по сути просто бесконечный while
	// существуют ключевые слова break и continue, выполняют всё то же самое что и везде

	// while do версии нет, но можно использовать бесконечный for в конце которого условие которое
	// просто вызовет break

	// идиоматически в Go считается использовать как можно меньше вложенных if, ну и с минимальным телом

	//for-range
}
